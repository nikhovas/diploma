# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_server.QuestionWorker_pb2 as QuestionWorker__pb2


class QuestionWorkerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetQuestionAnswer = channel.unary_unary(
                '/QuestionWorker.QuestionWorker/GetQuestionAnswer',
                request_serializer=QuestionWorker__pb2.GetQuestionAnswerRequest.SerializeToString,
                response_deserializer=QuestionWorker__pb2.GetQuestionAnswerResponse.FromString,
                )
        self.AddQuestion = channel.unary_unary(
                '/QuestionWorker.QuestionWorker/AddQuestion',
                request_serializer=QuestionWorker__pb2.AddQuestionRequest.SerializeToString,
                response_deserializer=QuestionWorker__pb2.AddQuestionResponse.FromString,
                )


class QuestionWorkerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetQuestionAnswer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddQuestion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QuestionWorkerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetQuestionAnswer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQuestionAnswer,
                    request_deserializer=QuestionWorker__pb2.GetQuestionAnswerRequest.FromString,
                    response_serializer=QuestionWorker__pb2.GetQuestionAnswerResponse.SerializeToString,
            ),
            'AddQuestion': grpc.unary_unary_rpc_method_handler(
                    servicer.AddQuestion,
                    request_deserializer=QuestionWorker__pb2.AddQuestionRequest.FromString,
                    response_serializer=QuestionWorker__pb2.AddQuestionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'QuestionWorker.QuestionWorker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QuestionWorker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetQuestionAnswer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QuestionWorker.QuestionWorker/GetQuestionAnswer',
            QuestionWorker__pb2.GetQuestionAnswerRequest.SerializeToString,
            QuestionWorker__pb2.GetQuestionAnswerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddQuestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QuestionWorker.QuestionWorker/AddQuestion',
            QuestionWorker__pb2.AddQuestionRequest.SerializeToString,
            QuestionWorker__pb2.AddQuestionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
