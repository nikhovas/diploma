// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: question_worker.proto

package question_worker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuestionWorkerClient is the client API for QuestionWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionWorkerClient interface {
	GetQuestionAnswer(ctx context.Context, in *GetQuestionAnswerRequest, opts ...grpc.CallOption) (*GetQuestionAnswerResponse, error)
	AddQuestion(ctx context.Context, in *AddQuestionRequest, opts ...grpc.CallOption) (*AddQuestionResponse, error)
}

type questionWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionWorkerClient(cc grpc.ClientConnInterface) QuestionWorkerClient {
	return &questionWorkerClient{cc}
}

func (c *questionWorkerClient) GetQuestionAnswer(ctx context.Context, in *GetQuestionAnswerRequest, opts ...grpc.CallOption) (*GetQuestionAnswerResponse, error) {
	out := new(GetQuestionAnswerResponse)
	err := c.cc.Invoke(ctx, "/question_worker.QuestionWorker/GetQuestionAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionWorkerClient) AddQuestion(ctx context.Context, in *AddQuestionRequest, opts ...grpc.CallOption) (*AddQuestionResponse, error) {
	out := new(AddQuestionResponse)
	err := c.cc.Invoke(ctx, "/question_worker.QuestionWorker/AddQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionWorkerServer is the server API for QuestionWorker service.
// All implementations must embed UnimplementedQuestionWorkerServer
// for forward compatibility
type QuestionWorkerServer interface {
	GetQuestionAnswer(context.Context, *GetQuestionAnswerRequest) (*GetQuestionAnswerResponse, error)
	AddQuestion(context.Context, *AddQuestionRequest) (*AddQuestionResponse, error)
	mustEmbedUnimplementedQuestionWorkerServer()
}

// UnimplementedQuestionWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedQuestionWorkerServer struct {
}

func (UnimplementedQuestionWorkerServer) GetQuestionAnswer(context.Context, *GetQuestionAnswerRequest) (*GetQuestionAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionAnswer not implemented")
}
func (UnimplementedQuestionWorkerServer) AddQuestion(context.Context, *AddQuestionRequest) (*AddQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQuestion not implemented")
}
func (UnimplementedQuestionWorkerServer) mustEmbedUnimplementedQuestionWorkerServer() {}

// UnsafeQuestionWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionWorkerServer will
// result in compilation errors.
type UnsafeQuestionWorkerServer interface {
	mustEmbedUnimplementedQuestionWorkerServer()
}

func RegisterQuestionWorkerServer(s grpc.ServiceRegistrar, srv QuestionWorkerServer) {
	s.RegisterService(&QuestionWorker_ServiceDesc, srv)
}

func _QuestionWorker_GetQuestionAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionWorkerServer).GetQuestionAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question_worker.QuestionWorker/GetQuestionAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionWorkerServer).GetQuestionAnswer(ctx, req.(*GetQuestionAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionWorker_AddQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionWorkerServer).AddQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/question_worker.QuestionWorker/AddQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionWorkerServer).AddQuestion(ctx, req.(*AddQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionWorker_ServiceDesc is the grpc.ServiceDesc for QuestionWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "question_worker.QuestionWorker",
	HandlerType: (*QuestionWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuestionAnswer",
			Handler:    _QuestionWorker_GetQuestionAnswer_Handler,
		},
		{
			MethodName: "AddQuestion",
			Handler:    _QuestionWorker_AddQuestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "question_worker.proto",
}
