// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vk_products_updater

import (
	context "context"
	common "github.com/nikhovas/diploma/go/lib/proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VkProductsUpdaterClient is the client API for VkProductsUpdater service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VkProductsUpdaterClient interface {
	UpdateProducts(ctx context.Context, in *UpdateProductsRequest, opts ...grpc.CallOption) (*common.EmptyResponse, error)
}

type vkProductsUpdaterClient struct {
	cc grpc.ClientConnInterface
}

func NewVkProductsUpdaterClient(cc grpc.ClientConnInterface) VkProductsUpdaterClient {
	return &vkProductsUpdaterClient{cc}
}

func (c *vkProductsUpdaterClient) UpdateProducts(ctx context.Context, in *UpdateProductsRequest, opts ...grpc.CallOption) (*common.EmptyResponse, error) {
	out := new(common.EmptyResponse)
	err := c.cc.Invoke(ctx, "/vk_products_getter.VkProductsUpdater/UpdateProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VkProductsUpdaterServer is the server API for VkProductsUpdater service.
// All implementations must embed UnimplementedVkProductsUpdaterServer
// for forward compatibility
type VkProductsUpdaterServer interface {
	UpdateProducts(context.Context, *UpdateProductsRequest) (*common.EmptyResponse, error)
	mustEmbedUnimplementedVkProductsUpdaterServer()
}

// UnimplementedVkProductsUpdaterServer must be embedded to have forward compatible implementations.
type UnimplementedVkProductsUpdaterServer struct {
}

func (UnimplementedVkProductsUpdaterServer) UpdateProducts(context.Context, *UpdateProductsRequest) (*common.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProducts not implemented")
}
func (UnimplementedVkProductsUpdaterServer) mustEmbedUnimplementedVkProductsUpdaterServer() {}

// UnsafeVkProductsUpdaterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VkProductsUpdaterServer will
// result in compilation errors.
type UnsafeVkProductsUpdaterServer interface {
	mustEmbedUnimplementedVkProductsUpdaterServer()
}

func RegisterVkProductsUpdaterServer(s grpc.ServiceRegistrar, srv VkProductsUpdaterServer) {
	s.RegisterService(&VkProductsUpdater_ServiceDesc, srv)
}

func _VkProductsUpdater_UpdateProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VkProductsUpdaterServer).UpdateProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vk_products_getter.VkProductsUpdater/UpdateProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VkProductsUpdaterServer).UpdateProducts(ctx, req.(*UpdateProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VkProductsUpdater_ServiceDesc is the grpc.ServiceDesc for VkProductsUpdater service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VkProductsUpdater_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vk_products_getter.VkProductsUpdater",
	HandlerType: (*VkProductsUpdaterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateProducts",
			Handler:    _VkProductsUpdater_UpdateProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vk_products_updater.proto",
}
