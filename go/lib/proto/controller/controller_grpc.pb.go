// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package controller

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControllerClient interface {
	ListShops(ctx context.Context, in *ListShopsRequest, opts ...grpc.CallOption) (*ListShopsResponse, error)
	AddShop(ctx context.Context, in *AddShopRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	ModifyShop(ctx context.Context, in *ModifyShopRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	DeleteShop(ctx context.Context, in *DeleteShopRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	AddQuestionAnswer(ctx context.Context, in *AddQuestionAnswerRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	AddQuestion(ctx context.Context, in *AddQuestionRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	ChangeBotState(ctx context.Context, in *ChangeBotStateRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	ChangeUserRole(ctx context.Context, in *ChangeUserRoleRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	NotifyBotStatusChange(ctx context.Context, in *NotifyBotStatusChangeRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	GetShopIdByKey(ctx context.Context, in *ShopKey, opts ...grpc.CallOption) (*GetShopIdByKeyResponse, error)
}

type controllerClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerClient(cc grpc.ClientConnInterface) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) ListShops(ctx context.Context, in *ListShopsRequest, opts ...grpc.CallOption) (*ListShopsResponse, error) {
	out := new(ListShopsResponse)
	err := c.cc.Invoke(ctx, "/controller.Controller/ListShops", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) AddShop(ctx context.Context, in *AddShopRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/controller.Controller/AddShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ModifyShop(ctx context.Context, in *ModifyShopRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/controller.Controller/ModifyShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) DeleteShop(ctx context.Context, in *DeleteShopRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/controller.Controller/DeleteShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) AddQuestionAnswer(ctx context.Context, in *AddQuestionAnswerRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/controller.Controller/AddQuestionAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) AddQuestion(ctx context.Context, in *AddQuestionRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/controller.Controller/AddQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ChangeBotState(ctx context.Context, in *ChangeBotStateRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/controller.Controller/ChangeBotState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ChangeUserRole(ctx context.Context, in *ChangeUserRoleRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/controller.Controller/ChangeUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) NotifyBotStatusChange(ctx context.Context, in *NotifyBotStatusChangeRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/controller.Controller/NotifyBotStatusChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetShopIdByKey(ctx context.Context, in *ShopKey, opts ...grpc.CallOption) (*GetShopIdByKeyResponse, error) {
	out := new(GetShopIdByKeyResponse)
	err := c.cc.Invoke(ctx, "/controller.Controller/GetShopIdByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServer is the server API for Controller service.
// All implementations must embed UnimplementedControllerServer
// for forward compatibility
type ControllerServer interface {
	ListShops(context.Context, *ListShopsRequest) (*ListShopsResponse, error)
	AddShop(context.Context, *AddShopRequest) (*DefaultResponse, error)
	ModifyShop(context.Context, *ModifyShopRequest) (*DefaultResponse, error)
	DeleteShop(context.Context, *DeleteShopRequest) (*DefaultResponse, error)
	AddQuestionAnswer(context.Context, *AddQuestionAnswerRequest) (*DefaultResponse, error)
	AddQuestion(context.Context, *AddQuestionRequest) (*DefaultResponse, error)
	ChangeBotState(context.Context, *ChangeBotStateRequest) (*DefaultResponse, error)
	ChangeUserRole(context.Context, *ChangeUserRoleRequest) (*DefaultResponse, error)
	NotifyBotStatusChange(context.Context, *NotifyBotStatusChangeRequest) (*DefaultResponse, error)
	GetShopIdByKey(context.Context, *ShopKey) (*GetShopIdByKeyResponse, error)
	mustEmbedUnimplementedControllerServer()
}

// UnimplementedControllerServer must be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (UnimplementedControllerServer) ListShops(context.Context, *ListShopsRequest) (*ListShopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShops not implemented")
}
func (UnimplementedControllerServer) AddShop(context.Context, *AddShopRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShop not implemented")
}
func (UnimplementedControllerServer) ModifyShop(context.Context, *ModifyShopRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyShop not implemented")
}
func (UnimplementedControllerServer) DeleteShop(context.Context, *DeleteShopRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShop not implemented")
}
func (UnimplementedControllerServer) AddQuestionAnswer(context.Context, *AddQuestionAnswerRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQuestionAnswer not implemented")
}
func (UnimplementedControllerServer) AddQuestion(context.Context, *AddQuestionRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQuestion not implemented")
}
func (UnimplementedControllerServer) ChangeBotState(context.Context, *ChangeBotStateRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeBotState not implemented")
}
func (UnimplementedControllerServer) ChangeUserRole(context.Context, *ChangeUserRoleRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserRole not implemented")
}
func (UnimplementedControllerServer) NotifyBotStatusChange(context.Context, *NotifyBotStatusChangeRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyBotStatusChange not implemented")
}
func (UnimplementedControllerServer) GetShopIdByKey(context.Context, *ShopKey) (*GetShopIdByKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopIdByKey not implemented")
}
func (UnimplementedControllerServer) mustEmbedUnimplementedControllerServer() {}

// UnsafeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServer will
// result in compilation errors.
type UnsafeControllerServer interface {
	mustEmbedUnimplementedControllerServer()
}

func RegisterControllerServer(s grpc.ServiceRegistrar, srv ControllerServer) {
	s.RegisterService(&Controller_ServiceDesc, srv)
}

func _Controller_ListShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ListShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.Controller/ListShops",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ListShops(ctx, req.(*ListShopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_AddShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).AddShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.Controller/AddShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).AddShop(ctx, req.(*AddShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ModifyShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ModifyShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.Controller/ModifyShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ModifyShop(ctx, req.(*ModifyShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_DeleteShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).DeleteShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.Controller/DeleteShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).DeleteShop(ctx, req.(*DeleteShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_AddQuestionAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddQuestionAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).AddQuestionAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.Controller/AddQuestionAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).AddQuestionAnswer(ctx, req.(*AddQuestionAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_AddQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).AddQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.Controller/AddQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).AddQuestion(ctx, req.(*AddQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ChangeBotState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeBotStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ChangeBotState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.Controller/ChangeBotState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ChangeBotState(ctx, req.(*ChangeBotStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ChangeUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ChangeUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.Controller/ChangeUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ChangeUserRole(ctx, req.(*ChangeUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_NotifyBotStatusChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyBotStatusChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).NotifyBotStatusChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.Controller/NotifyBotStatusChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).NotifyBotStatusChange(ctx, req.(*NotifyBotStatusChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetShopIdByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetShopIdByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.Controller/GetShopIdByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetShopIdByKey(ctx, req.(*ShopKey))
	}
	return interceptor(ctx, in, info, handler)
}

// Controller_ServiceDesc is the grpc.ServiceDesc for Controller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Controller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controller.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListShops",
			Handler:    _Controller_ListShops_Handler,
		},
		{
			MethodName: "AddShop",
			Handler:    _Controller_AddShop_Handler,
		},
		{
			MethodName: "ModifyShop",
			Handler:    _Controller_ModifyShop_Handler,
		},
		{
			MethodName: "DeleteShop",
			Handler:    _Controller_DeleteShop_Handler,
		},
		{
			MethodName: "AddQuestionAnswer",
			Handler:    _Controller_AddQuestionAnswer_Handler,
		},
		{
			MethodName: "AddQuestion",
			Handler:    _Controller_AddQuestion_Handler,
		},
		{
			MethodName: "ChangeBotState",
			Handler:    _Controller_ChangeBotState_Handler,
		},
		{
			MethodName: "ChangeUserRole",
			Handler:    _Controller_ChangeUserRole_Handler,
		},
		{
			MethodName: "NotifyBotStatusChange",
			Handler:    _Controller_NotifyBotStatusChange_Handler,
		},
		{
			MethodName: "GetShopIdByKey",
			Handler:    _Controller_GetShopIdByKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller.proto",
}
