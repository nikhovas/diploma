// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: staff_bot.proto

package staff_bot

import (
	context "context"
	common "github.com/nikhovas/diploma/go/lib/proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TelegramStaffBotClient is the client API for TelegramStaffBot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelegramStaffBotClient interface {
	SendNewQuestion(ctx context.Context, in *NewQuestionRequest, opts ...grpc.CallOption) (*common.EmptyResponse, error)
	NotifyBotStatusTelegramChange(ctx context.Context, in *NotifyBotStatusChangeTelegramRequest, opts ...grpc.CallOption) (*common.EmptyResponse, error)
	NotifyNewOrder(ctx context.Context, in *NotifyNewOrderRequest, opts ...grpc.CallOption) (*common.EmptyResponse, error)
}

type telegramStaffBotClient struct {
	cc grpc.ClientConnInterface
}

func NewTelegramStaffBotClient(cc grpc.ClientConnInterface) TelegramStaffBotClient {
	return &telegramStaffBotClient{cc}
}

func (c *telegramStaffBotClient) SendNewQuestion(ctx context.Context, in *NewQuestionRequest, opts ...grpc.CallOption) (*common.EmptyResponse, error) {
	out := new(common.EmptyResponse)
	err := c.cc.Invoke(ctx, "/staff_bot.TelegramStaffBot/SendNewQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramStaffBotClient) NotifyBotStatusTelegramChange(ctx context.Context, in *NotifyBotStatusChangeTelegramRequest, opts ...grpc.CallOption) (*common.EmptyResponse, error) {
	out := new(common.EmptyResponse)
	err := c.cc.Invoke(ctx, "/staff_bot.TelegramStaffBot/NotifyBotStatusTelegramChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramStaffBotClient) NotifyNewOrder(ctx context.Context, in *NotifyNewOrderRequest, opts ...grpc.CallOption) (*common.EmptyResponse, error) {
	out := new(common.EmptyResponse)
	err := c.cc.Invoke(ctx, "/staff_bot.TelegramStaffBot/NotifyNewOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelegramStaffBotServer is the server API for TelegramStaffBot service.
// All implementations must embed UnimplementedTelegramStaffBotServer
// for forward compatibility
type TelegramStaffBotServer interface {
	SendNewQuestion(context.Context, *NewQuestionRequest) (*common.EmptyResponse, error)
	NotifyBotStatusTelegramChange(context.Context, *NotifyBotStatusChangeTelegramRequest) (*common.EmptyResponse, error)
	NotifyNewOrder(context.Context, *NotifyNewOrderRequest) (*common.EmptyResponse, error)
	mustEmbedUnimplementedTelegramStaffBotServer()
}

// UnimplementedTelegramStaffBotServer must be embedded to have forward compatible implementations.
type UnimplementedTelegramStaffBotServer struct {
}

func (UnimplementedTelegramStaffBotServer) SendNewQuestion(context.Context, *NewQuestionRequest) (*common.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNewQuestion not implemented")
}
func (UnimplementedTelegramStaffBotServer) NotifyBotStatusTelegramChange(context.Context, *NotifyBotStatusChangeTelegramRequest) (*common.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyBotStatusTelegramChange not implemented")
}
func (UnimplementedTelegramStaffBotServer) NotifyNewOrder(context.Context, *NotifyNewOrderRequest) (*common.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyNewOrder not implemented")
}
func (UnimplementedTelegramStaffBotServer) mustEmbedUnimplementedTelegramStaffBotServer() {}

// UnsafeTelegramStaffBotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelegramStaffBotServer will
// result in compilation errors.
type UnsafeTelegramStaffBotServer interface {
	mustEmbedUnimplementedTelegramStaffBotServer()
}

func RegisterTelegramStaffBotServer(s grpc.ServiceRegistrar, srv TelegramStaffBotServer) {
	s.RegisterService(&TelegramStaffBot_ServiceDesc, srv)
}

func _TelegramStaffBot_SendNewQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramStaffBotServer).SendNewQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staff_bot.TelegramStaffBot/SendNewQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramStaffBotServer).SendNewQuestion(ctx, req.(*NewQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramStaffBot_NotifyBotStatusTelegramChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyBotStatusChangeTelegramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramStaffBotServer).NotifyBotStatusTelegramChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staff_bot.TelegramStaffBot/NotifyBotStatusTelegramChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramStaffBotServer).NotifyBotStatusTelegramChange(ctx, req.(*NotifyBotStatusChangeTelegramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramStaffBot_NotifyNewOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyNewOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramStaffBotServer).NotifyNewOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staff_bot.TelegramStaffBot/NotifyNewOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramStaffBotServer).NotifyNewOrder(ctx, req.(*NotifyNewOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TelegramStaffBot_ServiceDesc is the grpc.ServiceDesc for TelegramStaffBot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelegramStaffBot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "staff_bot.TelegramStaffBot",
	HandlerType: (*TelegramStaffBotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendNewQuestion",
			Handler:    _TelegramStaffBot_SendNewQuestion_Handler,
		},
		{
			MethodName: "NotifyBotStatusTelegramChange",
			Handler:    _TelegramStaffBot_NotifyBotStatusTelegramChange_Handler,
		},
		{
			MethodName: "NotifyNewOrder",
			Handler:    _TelegramStaffBot_NotifyNewOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "staff_bot.proto",
}
