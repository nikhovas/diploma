// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package control

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControlClient is the client API for Control service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlClient interface {
	ListShops(ctx context.Context, in *ListShopsRequest, opts ...grpc.CallOption) (*ListShopsResponse, error)
	AddShop(ctx context.Context, in *AddShopRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	ModifyShop(ctx context.Context, in *ModifyShopRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	DeleteShop(ctx context.Context, in *DeleteShopRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	AddQuestionAnswer(ctx context.Context, in *AddQuestionAnswerRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	AddQuestion(ctx context.Context, in *AddQuestionRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	ChangeBotState(ctx context.Context, in *ChangeBotStateRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	ChangeUserRole(ctx context.Context, in *ChangeUserRoleRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	NotifyBotStatusChange(ctx context.Context, in *NotifyBotStatusChangeRequest, opts ...grpc.CallOption) (*DefaultResponse, error)
	GetShopIdByKey(ctx context.Context, in *ShopKey, opts ...grpc.CallOption) (*GetShopIdByKeyResponse, error)
}

type controlClient struct {
	cc grpc.ClientConnInterface
}

func NewControlClient(cc grpc.ClientConnInterface) ControlClient {
	return &controlClient{cc}
}

func (c *controlClient) ListShops(ctx context.Context, in *ListShopsRequest, opts ...grpc.CallOption) (*ListShopsResponse, error) {
	out := new(ListShopsResponse)
	err := c.cc.Invoke(ctx, "/Control/ListShops", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) AddShop(ctx context.Context, in *AddShopRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/Control/AddShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) ModifyShop(ctx context.Context, in *ModifyShopRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/Control/ModifyShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) DeleteShop(ctx context.Context, in *DeleteShopRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/Control/DeleteShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) AddQuestionAnswer(ctx context.Context, in *AddQuestionAnswerRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/Control/AddQuestionAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) AddQuestion(ctx context.Context, in *AddQuestionRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/Control/AddQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) ChangeBotState(ctx context.Context, in *ChangeBotStateRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/Control/ChangeBotState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) ChangeUserRole(ctx context.Context, in *ChangeUserRoleRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/Control/ChangeUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) NotifyBotStatusChange(ctx context.Context, in *NotifyBotStatusChangeRequest, opts ...grpc.CallOption) (*DefaultResponse, error) {
	out := new(DefaultResponse)
	err := c.cc.Invoke(ctx, "/Control/NotifyBotStatusChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) GetShopIdByKey(ctx context.Context, in *ShopKey, opts ...grpc.CallOption) (*GetShopIdByKeyResponse, error) {
	out := new(GetShopIdByKeyResponse)
	err := c.cc.Invoke(ctx, "/Control/GetShopIdByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlServer is the server API for Control service.
// All implementations must embed UnimplementedControlServer
// for forward compatibility
type ControlServer interface {
	ListShops(context.Context, *ListShopsRequest) (*ListShopsResponse, error)
	AddShop(context.Context, *AddShopRequest) (*DefaultResponse, error)
	ModifyShop(context.Context, *ModifyShopRequest) (*DefaultResponse, error)
	DeleteShop(context.Context, *DeleteShopRequest) (*DefaultResponse, error)
	AddQuestionAnswer(context.Context, *AddQuestionAnswerRequest) (*DefaultResponse, error)
	AddQuestion(context.Context, *AddQuestionRequest) (*DefaultResponse, error)
	ChangeBotState(context.Context, *ChangeBotStateRequest) (*DefaultResponse, error)
	ChangeUserRole(context.Context, *ChangeUserRoleRequest) (*DefaultResponse, error)
	NotifyBotStatusChange(context.Context, *NotifyBotStatusChangeRequest) (*DefaultResponse, error)
	GetShopIdByKey(context.Context, *ShopKey) (*GetShopIdByKeyResponse, error)
	mustEmbedUnimplementedControlServer()
}

// UnimplementedControlServer must be embedded to have forward compatible implementations.
type UnimplementedControlServer struct {
}

func (UnimplementedControlServer) ListShops(context.Context, *ListShopsRequest) (*ListShopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShops not implemented")
}
func (UnimplementedControlServer) AddShop(context.Context, *AddShopRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShop not implemented")
}
func (UnimplementedControlServer) ModifyShop(context.Context, *ModifyShopRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyShop not implemented")
}
func (UnimplementedControlServer) DeleteShop(context.Context, *DeleteShopRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShop not implemented")
}
func (UnimplementedControlServer) AddQuestionAnswer(context.Context, *AddQuestionAnswerRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQuestionAnswer not implemented")
}
func (UnimplementedControlServer) AddQuestion(context.Context, *AddQuestionRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQuestion not implemented")
}
func (UnimplementedControlServer) ChangeBotState(context.Context, *ChangeBotStateRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeBotState not implemented")
}
func (UnimplementedControlServer) ChangeUserRole(context.Context, *ChangeUserRoleRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserRole not implemented")
}
func (UnimplementedControlServer) NotifyBotStatusChange(context.Context, *NotifyBotStatusChangeRequest) (*DefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyBotStatusChange not implemented")
}
func (UnimplementedControlServer) GetShopIdByKey(context.Context, *ShopKey) (*GetShopIdByKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopIdByKey not implemented")
}
func (UnimplementedControlServer) mustEmbedUnimplementedControlServer() {}

// UnsafeControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlServer will
// result in compilation errors.
type UnsafeControlServer interface {
	mustEmbedUnimplementedControlServer()
}

func RegisterControlServer(s grpc.ServiceRegistrar, srv ControlServer) {
	s.RegisterService(&Control_ServiceDesc, srv)
}

func _Control_ListShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).ListShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Control/ListShops",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).ListShops(ctx, req.(*ListShopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_AddShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).AddShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Control/AddShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).AddShop(ctx, req.(*AddShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_ModifyShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).ModifyShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Control/ModifyShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).ModifyShop(ctx, req.(*ModifyShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_DeleteShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).DeleteShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Control/DeleteShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).DeleteShop(ctx, req.(*DeleteShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_AddQuestionAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddQuestionAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).AddQuestionAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Control/AddQuestionAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).AddQuestionAnswer(ctx, req.(*AddQuestionAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_AddQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).AddQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Control/AddQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).AddQuestion(ctx, req.(*AddQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_ChangeBotState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeBotStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).ChangeBotState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Control/ChangeBotState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).ChangeBotState(ctx, req.(*ChangeBotStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_ChangeUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).ChangeUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Control/ChangeUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).ChangeUserRole(ctx, req.(*ChangeUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_NotifyBotStatusChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyBotStatusChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).NotifyBotStatusChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Control/NotifyBotStatusChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).NotifyBotStatusChange(ctx, req.(*NotifyBotStatusChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_GetShopIdByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetShopIdByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Control/GetShopIdByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetShopIdByKey(ctx, req.(*ShopKey))
	}
	return interceptor(ctx, in, info, handler)
}

// Control_ServiceDesc is the grpc.ServiceDesc for Control service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Control_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Control",
	HandlerType: (*ControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListShops",
			Handler:    _Control_ListShops_Handler,
		},
		{
			MethodName: "AddShop",
			Handler:    _Control_AddShop_Handler,
		},
		{
			MethodName: "ModifyShop",
			Handler:    _Control_ModifyShop_Handler,
		},
		{
			MethodName: "DeleteShop",
			Handler:    _Control_DeleteShop_Handler,
		},
		{
			MethodName: "AddQuestionAnswer",
			Handler:    _Control_AddQuestionAnswer_Handler,
		},
		{
			MethodName: "AddQuestion",
			Handler:    _Control_AddQuestion_Handler,
		},
		{
			MethodName: "ChangeBotState",
			Handler:    _Control_ChangeBotState_Handler,
		},
		{
			MethodName: "ChangeUserRole",
			Handler:    _Control_ChangeUserRole_Handler,
		},
		{
			MethodName: "NotifyBotStatusChange",
			Handler:    _Control_NotifyBotStatusChange_Handler,
		},
		{
			MethodName: "GetShopIdByKey",
			Handler:    _Control_GetShopIdByKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Control.proto",
}
