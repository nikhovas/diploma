syntax = "proto3";
package controller;
import "common.proto";
option go_package = "github.com/nikhovas/diploma/go/lib/proto/controller";


message TelegramMessageInfo {
    int64 chatId = 1;
    bool isChatPrivate = 2;
    int64 userId = 3;
    optional string botName = 4;
}

message MessageInformation {
    oneof info {
        TelegramMessageInfo telegram = 1;
    }
}

message CommonBotInfo {
    string name = 1;
    string token = 2;
    int64 groupId = 3;
}

message OptionalCommonBotInfo {
    optional string name = 1;
    optional string token = 2;
    optional int64 groupId = 3;
}

message TelegramBotInfo {
    int64 chatId = 1;
}

message OptionalTelegramBotInfo {
    optional int64 chatId = 1;
}

message PlatformBotInfo {
    optional TelegramBotInfo telegram = 1;
}

message OptionalPlatformBotInfo {
    OptionalTelegramBotInfo telegram = 1;
}

message BotInfo {
    CommonBotInfo commonBotInfo = 1;
    PlatformBotInfo platformBotInfo = 2;
}

message OptionalBotInfo {
    optional OptionalCommonBotInfo commonBotInfo = 1;
    optional OptionalPlatformBotInfo platformBotInfo = 2;
}

message CommonShopKey {
    oneof commonKey {
        int64 id = 1;
        string name = 2;
    };
}

message TelegramStaffNameAndUserShopKey {
    int64 userId = 1;
    string shopName = 2;
}

message TelegramStaffShopKey {
    oneof telegramKey {
        int64 groupId = 1;
        TelegramStaffNameAndUserShopKey nameAndUser = 2;
    }
}

message VkConsumerShopKey {
    oneof key {
        int64 groupId = 1;
    }
}

message ShopKey {
    oneof key {
        CommonShopKey common = 1;
        TelegramStaffShopKey telegramStaff = 2;
        VkConsumerShopKey vkConsumer = 3;
    }
}

message EmptyOkResponse {}

message NoRoleResponse {
    repeated string requiredOneOf = 1;
}

message BadChatType {
    bool shouldBePrivate = 1;
}

message DefaultResponse {
    oneof resp {
        EmptyOkResponse success = 1;
        NoRoleResponse noRoleError = 2;
        BadChatType badChatType = 3;
    }
}

message AddQuestionAnswerRequest {
    string uuid = 1;
    MessageInformation messageInfo = 2;
    ShopKey key = 3;
    string question = 4;
    string answer = 5;
    bool checkQuestionInSet = 6;
}

message ChangeBotStateRequest {
    string uuid = 1;
    MessageInformation messageInfo = 2;
    ShopKey key = 3;
    bool toEnabled = 4;
}

message AddShopRequest {
    string uuid = 1;
    MessageInformation messageInfo = 2;
    BotInfo bot = 3;
}

message DeleteShopRequest {
    string uuid = 1;
    MessageInformation messageInfo = 2;
    ShopKey key = 3;
}

message ModifyShopRequest {
    string uuid = 1;
    MessageInformation messageInfo = 2;
    ShopKey key = 3;
    OptionalBotInfo bot = 4;
}

message ListShopsRequest {
    string uuid = 1;
    MessageInformation messageInfo = 2;
}

message ListBotSuccessResponse {
    repeated CommonBotInfo bots = 1;
}

message ListShopsResponse {
    oneof resp {
        ListBotSuccessResponse success = 1;
        NoRoleResponse noRoleError = 2;
        BadChatType badChatType = 3;
    }
}

message UserKey {
    oneof key {
        int64 commonUserId = 1;
        int64 telegramStaffUserId = 2;
    }
}

message ChangeUserRoleRequest {
    string uuid = 1;
    MessageInformation messageInfo = 2;
    ShopKey key = 3;
    UserKey modifyUserId = 4;
    string role = 5;
    bool isAddAction = 6;
}

message AddQuestionRequest {
    string uuid = 1;
    ShopKey key = 2;
    common.WaitingQuesionInformation info = 3;
}

message NotifyBotStatusChangeRequest {
    string uuid = 1;
    ShopKey key = 2;
    bool toEnabled = 3;
}

message GetShopIdByKeyResponse {
    int64 shopId = 1;
}

service Controller {
    rpc ListShops(ListShopsRequest) returns (ListShopsResponse) {}
    rpc AddShop(AddShopRequest) returns (DefaultResponse) {}
    rpc ModifyShop(ModifyShopRequest) returns (DefaultResponse) {}
    rpc DeleteShop(DeleteShopRequest) returns (DefaultResponse) {}

    rpc AddQuestionAnswer(AddQuestionAnswerRequest) returns (DefaultResponse) {}
    rpc AddQuestion(AddQuestionRequest) returns (DefaultResponse) {}

    rpc ChangeBotState(ChangeBotStateRequest) returns (DefaultResponse) {}
    rpc ChangeUserRole(ChangeUserRoleRequest) returns (DefaultResponse) {}
    rpc NotifyBotStatusChange(NotifyBotStatusChangeRequest) returns (DefaultResponse) {}
    rpc GetShopIdByKey(ShopKey) returns(GetShopIdByKeyResponse) {}
}